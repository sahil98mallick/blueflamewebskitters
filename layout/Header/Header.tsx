import * as React from 'react';
import AppBar from '@mui/material/AppBar';
import Box from '@mui/material/Box';
import Toolbar from '@mui/material/Toolbar';
import Container from '@mui/material/Container';
import Button from '@mui/material/Button';
import { useThemeContext } from '@/muitheme/ThemeContextProvider';
import Head from 'next/head';
import LightModeIcon from '@mui/icons-material/LightMode';
import { getToken, removeToken } from '@/utils/localStorage';
import { useRouter } from 'next/router';
import { toast } from 'react-toastify';
import Brightness4Icon from '@mui/icons-material/Brightness4';


const Header = () => {
    const { mode, toggleColorMode } = useThemeContext();
    const router = useRouter()
    const wrapperStyles = {
        color: mode === 'dark' ? '#2C3E50' : '#0578C8',
        background: mode === 'dark' ? '#2C3E50' : 'radial-gradient(circle, rgba(232,232,232,1) 0%, rgba(252,252,252,1) 100%)',
        Height: 'auto',
        display: 'flex',
        flexDirection: 'column',
        width: '100%',
    };

    const [isAuthenticated, setIsAuthenticated] = React.useState(false);
    const token = getToken();
    React.useEffect(() => {
        console.log("Token retrieved:", token);
        if (token) {
            setIsAuthenticated(!!token);
        }
    }, [token]);

    const handleSignOut = () => {
        removeToken().then(removed => {
            console.log("Token removed:", removed);
            if (removed) {
                toast.warn("Logout Successfuly");
                setIsAuthenticated(false);
                router.push("/");
            } else {
                alert('Failed to remove token');
            }
        });
    };
    return (
        <>
            <Head>
                <title>BlueFlame</title>
                <meta name="description" content="Generated by create next app" />
                <meta name="viewport" content="width=device-width, initial-scale=1" />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            <AppBar position="fixed" sx={wrapperStyles} className='header'>
                <Container maxWidth="xl">
                    <Toolbar disableGutters className='toolbar'>
                        <img src="https://aperture-ui.dedicateddevelopers.us/assets/images/logo_white_latest.png" alt="LogoImage" style={{ width: "150px", height: "50px" }} onClick={toggleColorMode} />
                        <Box className="navitems-menu">
                            <Button onClick={toggleColorMode}>
                                {mode == 'dark' ? <LightModeIcon style={{
                                    fontSize: "20px",
                                    color: "white"
                                }}
                                /> :
                                    <Brightness4Icon style={{ fontSize: "20px", color: "black" }} />}
                            </Button>
                            {isAuthenticated && (
                                <Button onClick={() => { handleSignOut() }} variant='contained' color='error' className='logoutbtn' size='small'>Sign-out</Button>
                            )}
                        </Box>
                    </Toolbar>
                </Container>
            </AppBar>
        </>
    )
}

export default Header